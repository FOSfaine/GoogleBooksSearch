{"ast":null,"code":"import _classCallCheck from \"/Users/esthercho/Downloads/book-search/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/esthercho/Downloads/book-search/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/esthercho/Downloads/book-search/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/esthercho/Downloads/book-search/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/esthercho/Downloads/book-search/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/esthercho/Downloads/book-search/client/src/pages/Home.js\";\nimport React, { Component } from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport Card from \"../components/Card\";\nimport Form from \"../components/Form\";\nimport Book from \"../components/Book\";\nimport Footer from \"../components/Footer\";\nimport API from \"../utils/API\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List } from \"../components/List\";\n\nvar Home =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Home, _Component);\n\n  function Home() {\n    _classCallCheck(this, Home);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Home).apply(this, arguments));\n  }\n\n  _createClass(Home, [{\n    key: \"render\",\n    //create a state object with books, q, and message('Search for a book to begin!') properties\n    //create handleInputChange method, grab name and value from event object, call setState method to update\n    //create getBooks method that calls API.getBooks passing in q, then with the response update states value for the book property, always a good idea to catch an error and update state if no book was found\n    //create handleFormSubmit method and call getBooks\n    //create handleBookSave method, pass in id, create variable for book whose value will be from searching in state with the id passed in, next call API.saveBook with properties for googleId, title, subtitle, link, authors, description, image, and then call getBooks method\n    value: function render() {\n      return React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, React.createElement(Col, {\n        size: \"md-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(Jumbotron, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, \"(React) Google Books Search\")), React.createElement(\"h2\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, \"Search for and Save Books of Interest.\"))), React.createElement(Col, {\n        size: \"md-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(Card, {\n        title: \"Book Search\",\n        icon: \"far fa-book\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(Form, {\n        handleInputChange: \"\",\n        handleFormSubmit: \"\",\n        q: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      })))), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(Col, {\n        size: \"md-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(Card, {\n        title: \"Results\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"//check if there is a books array and if so render a list component and map over books and for each book create a book instance with properties for id, title, subtitle, link, authors, description, image, Button - use a callback function with button element that has properties of onClick which calls handleBookSave with argument of book.id\"))), React.createElement(Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Home;\n}(Component);\n\nexport default Home;","map":{"version":3,"sources":["/Users/esthercho/Downloads/book-search/client/src/pages/Home.js"],"names":["React","Component","Jumbotron","Card","Form","Book","Footer","API","Col","Row","Container","List","Home"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,SAAnB,QAAoC,oBAApC;AACA,SAASC,IAAT,QAAqB,oBAArB;;IAEMC,I;;;;;;;;;;;;;AACJ;AAEA;AAEA;AAEA;AAEA;6BAES;AACP,aACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,GAAD;AAAK,QAAA,IAAI,EAAC,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADF,CADF,EAIE;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAJF,CADF,CADF,EAWE,oBAAC,GAAD;AAAK,QAAA,IAAI,EAAC,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAC,aAAZ;AAA0B,QAAA,IAAI,EAAC,aAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,iBAAiB,EAAC,EAAxB;AAA2B,QAAA,gBAAgB,EAAC,EAA5C;AAA+C,QAAA,CAAC,EAAC,EAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,CAXF,CADF,EAkBE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,GAAD;AAAK,QAAA,IAAI,EAAC,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAC,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+VADF,CADF,CAlBF,EA+BE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA/BF,CADF;AAmCD;;;;EA/CgBX,S;;AAkDnB,eAAeW,IAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport Card from \"../components/Card\";\nimport Form from \"../components/Form\";\nimport Book from \"../components/Book\";\nimport Footer from \"../components/Footer\";\nimport API from \"../utils/API\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List } from \"../components/List\";\n\nclass Home extends Component {\n  //create a state object with books, q, and message('Search for a book to begin!') properties\n\n  //create handleInputChange method, grab name and value from event object, call setState method to update\n\n  //create getBooks method that calls API.getBooks passing in q, then with the response update states value for the book property, always a good idea to catch an error and update state if no book was found\n\n  //create handleFormSubmit method and call getBooks\n\n  //create handleBookSave method, pass in id, create variable for book whose value will be from searching in state with the id passed in, next call API.saveBook with properties for googleId, title, subtitle, link, authors, description, image, and then call getBooks method\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col size=\"md-12\">\n            <Jumbotron>\n              <h1 className=\"text-center\">\n                <strong>(React) Google Books Search</strong>\n              </h1>\n              <h2 className=\"text-center\">\n                Search for and Save Books of Interest.\n              </h2>\n            </Jumbotron>\n          </Col>\n          <Col size=\"md-12\">\n            <Card title=\"Book Search\" icon=\"far fa-book\">\n              <Form handleInputChange=\"\" handleFormSubmit=\"\" q=\"\" />\n            </Card>\n          </Col>\n        </Row>\n        <Row>\n          <Col size=\"md-12\">\n            <Card title=\"Results\">\n              //check if there is a books array and if so render a list\n              component and map over books and for each book create a book\n              instance with properties for id, title, subtitle, link, authors,\n              description, image, Button - use a callback function with button\n              element that has properties of onClick which calls handleBookSave\n              with argument of book.id\n              {}\n            </Card>\n          </Col>\n        </Row>\n        <Footer />\n      </Container>\n    );\n  }\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}